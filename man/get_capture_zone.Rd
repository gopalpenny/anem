% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/anem_particle_tracking.R
\name{get_capture_zone}
\alias{get_capture_zone}
\title{Get capture zone}
\usage{
get_capture_zone(wells, aquifer, t_max = 365, wIDs = "all",
  n_particles = 8, buff_m = 20, injection_wells = FALSE, ...)
}
\arguments{
\item{wells}{Wells \code{data.frame} object, containing well images}

\item{aquifer}{Aquifer as an \code{aquifer} object, with \code{Ksat}, porosity, \code{n}, and boundaries (which are used to calculate gridded velocities)}

\item{t_max}{number of days to run particle tracking}

\item{wIDs}{wells at which to generate capture zones. Set to "all" or numeric value (or vector) containing wID for wells.}

\item{n_particles}{number of particles to initialize at each well}

\item{buff_m}{buffer radius (m) around each well at which particles are initialized}

\item{injection_wells}{if TRUE, particle tracking from injection wells is allowed. if FALSE, particle tracking from injection wells is prohibited.}

\item{...}{Additional arguments passed to \code{track_particles}}
}
\description{
Get the capture zone for one or more wells
}
\details{
Tracking particles are initialized radially around each well at a distance of \code{buff_m}. These particles must be
initialized outside any grid cells that overlap the well, because particle velocities inside this cell will be incorrect.

Note: \code{get_capture_zone} does not work with \code{recharge_type == "D"}.
}
\examples{
bounds_df <- data.frame(bound_type=c("NF","NF","CH","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer <- define_aquifer(aquifer_type="confined",Ksat=0.001,n=0.4,h0=0,z0=20,bounds=bounds_df)
wells_df_orig <- wells_example
wells_df_orig[4,"Q"] <- 0.25
wells <- generate_image_wells(define_wells(wells_df_orig), aquifer)
particle_paths <- get_capture_zone(wells, aquifer, t_max = 365*10, wIDs = "all", n_particles = 4)
particle_endpoint <- particle_paths[particle_paths$endpoint,]

library(ggplot2)
ggplot() +
  geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2,linetype=bound_type)) +
  geom_path(data=particle_paths,aes(x,y,color=as.factor(wID),group=interaction(pID,wID))) +
  geom_point(data=wells[wells$wID==wells$orig_wID,],aes(x,y,color=as.factor(wID)),size=3) +
  geom_point(data=particle_endpoint,aes(x,y,shape=status)) +
  scale_shape_manual(values=c(5,4,3,0,1)) +
  coord_equal()
}
