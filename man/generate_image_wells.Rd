% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/anem_imaging.R
\name{generate_image_wells}
\alias{generate_image_wells}
\title{Generate image wells across rectangular boundaries}
\usage{
generate_image_wells(wells, aquifer, num_levels)
}
\arguments{
\item{wells}{Wells with columns Q, diam, x, y}

\item{aquifer}{Aquifer object with bounds defined including columns for bID, bound_type, m, b}

\item{num_levels}{Maximum number of iterations to image wells (and well images). Greater than or equal to 1.}
}
\value{
A tibble containing original and mirrored wells, with the following columns:
  x, y, Q, diam, path, origin, transform (boundary type), source_bound.
  Columns in wells that are not reproduced by this function are filled with \code{NA}.
}
\description{
Mirror wells across 2 parallel bounds, then the two perpendicular bounds
}
\section{Method}{

The original wells are labelled L0. These wells are mirrored across a set of
parallel boundaries. Each mirrored well (L1) has a source well (L0) and source
boundary (the bound across which it was mirrored). The L1 wells then need to
be mirrored across the other parallel boundary. The wells from level Lx are mirrored
across the other boundary (ie, not the source boundary), and each mirror
well (L+) has a source well (Lx) and source boundary (the bound across
which it was mirrored). This is done for a first set of parallel boundaries,
then repeated for the other two perpendicular boundaries.
}

\section{Notes}{

The function requires that the wells are labeled with a column of identifiers, wID. If it is not
present, the function generates them. The image well wID's are always generated automatically.
not present.
}

\examples{
wells <- define_wells(x=c(5,0.5),y=c(2.5,0.25),Q=c(0.5,-0.2),diam=c(0.75,0.8))
bounds_df <- tibble(bound_type=c("CH","NF","NF","NF"),
                    m=c(0.8,-1.25,0.8,-1.25),b=c(0.3,10,-2.5,0.1),
                    bID=as.numeric(1:4))
bounds <- define_bounds(bounds_df)
image_wells <- generate_image_wells(wells,bounds,num_levels=1)
image_wells <- generate_image_wells(wells,bounds,num_levels=2) \%>\% mutate(original=level==0)
ggplot() +
  geom_segment(data=bounds,aes(x1,y1,xend=x2,yend=y2)) +
  geom_point(data=image_wells,aes(x,y,color=as.factor(origin))) + #ylim(c(-3,5)) + xlim(c(-1,7)) +
  scale_shape_manual(values=c(1,16)) +
  coord_equal()
}
