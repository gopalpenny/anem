geom_contour(aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
# geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray") +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
# geom_sf(data=pts_utm, aes(size=abs(Q),shape=type)) +
coord_sf(xlim=c(grid_bounds_unconf$xmin,grid_bounds_unconf$xmax),ylim=c(grid_bounds_unconf$ymin,grid_bounds_unconf$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
grid_pts_flowdir_unconf <- with(grid_bounds_unconf,crossing(x=seq(xmin,xmax,length.out=30),y=seq(ymin,ymax,length.out=20)))
flow_dir_unconf <- get_flowdir(grid_pts_flowdir_unconf,well_images,aquifer_unconfined)
# the dx_norm and dy_norm are used to make the arrows visible in the plot that follows.
flow_dir_unconf_df <- grid_pts_flowdir_unconf %>% bind_cols(flow_dir_unconf) %>%
mutate(angle=atan(dy/dx),
mag=sqrt(dx^2+dy^2),
mag_norm=mag^(1/3)*5e3,
dx_norm=cos(angle)*sign(dx)*mag_norm,
dy_norm=sin(angle)*sign(dx)*mag_norm,
x2=x+dx_norm,
y2=y+dy_norm)
# flow_dir_check <- flow_dir_df %>% select(dx,dx_norm,dy,dy_norm) %>%
#   mutate(check=sign(dx)==sign(dx_norm) & sign(dy)== sign(dy_norm))
# plot the flow velocities
ggplot(flow_dir_unconf_df) +
geom_raster(aes(x,y,fill=mag_norm))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray") +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
coord_sf(xlim=c(grid_bounds_unconf$xmin,grid_bounds_unconf$xmax),
ylim=c(grid_bounds_unconf$ymin,grid_bounds_unconf$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
ggplot(head_unconf_df) +
geom_raster(aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
# geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray") +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow_dir_unconf_df,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4)) #+ scale_size_continuous(limits=c(3,4))
# wells_genevese <- wells %>% filter(well_image=="Actual")
aquifer_genevese <- aquifer_unconfined
wells_game <- wells_genevese %>%
mutate(player=factor(well_group,levels=c("SIG","France","Commune"),labels=c("S","F","Recharge")),
well_sign=if_else(well_type=="pumping",-1,1)) %>%
group_by(player) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells_genevese <- wells %>% filter(well_image=="Actual")
aquifer_genevese <- aquifer_unconfined
wells_game <- wells_genevese %>%
mutate(player=factor(well_group,levels=c("SIG","France","Commune"),labels=c("S","F","Recharge")),
well_sign=if_else(well_type=="pumping",-1,1)) %>%
group_by(player) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
well_game_images <- generate_image_wells(wells_game,aquifer_genevese)
get_drawdown_relationships(well_game_images,aquifer_unconfined,player,weights)
PHI_SF <- get_potential_differential(loc=well_game_images %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_genevese) %>% mean()
print(PHI_SF)
PHI_FS <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_FF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_unconfined) %>% mean()
PHI_RS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
PHI_RF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
ggplot() +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_point(data=wells_game,aes(x,y,color=player,shape=well_type),size=3,stroke=1) +
scale_shape_manual(values=c(1,16)) #+ scale_size_continuous(limits=c(3,4))
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF) %>%
gather(PHI_ii,Value) %>% knitr::kable(format="html") %>%
kableExtra::kable_styling()
(PHI_SF <- get_potential_differential(loc=wells %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_confined) %>% mean())
(PHI_SF <- get_potential_differential(loc=wells_game %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_confined) %>% mean())
wells_game
well_game_images
get_potential_differential(loc=wells_game %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_confined) %>% mean()
(PHI_SF <- get_potential_differential(loc=wells_game %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_confined) %>% mean())
PHI_SF <- get_potential_differential(loc=well_game_images %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
#' set.seed(30)
#' wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
#'   dplyr::mutate(R=1000,  # t = 1 year
#'                 player=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
#'   group_by(player) %>% mutate(weights=1,Q=1/n()) %>% group_by()
#' wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
#'
#' get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
#'
#'PHI_SF <- get_potential_differential(loc=well_game_images %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_genevese) %>% mean()
PHI_SF <- get_potential_differential(loc=well_game_images %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_genevese) %>% mean()
PHI_SF
(PHI_SF <- get_potential_differential(loc=well_game_images %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_genevese) %>% mean())
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
dplyr::mutate(R=1000,  # t = 1 year
player=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(player) %>% mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
is_sf <- max(grepl("sf",class(wells)))
if (is_sf) {
wells <- wells %>% sf::st_set_geometry(NULL)
}
wells <- wells %>% dplyr::group_by()
group_column <- rlang::enquo(group_column)
weights_column <- rlang::enquo(weights_column)
weights_column <- rlang::quo(weights)
group_column <- rlang::quo(player)
aquifer <- aquifer_confined
loc_group <- "F"
pump_group <- "S"
check_weights <- wells %>% dplyr::select(orig_wID,!! weights_column) %>% dplyr::distinct() %>%
dplyr::group_by(orig_wID) %>%
dplyr::summarize(n=dplyr::n())
if (max(check_weights$n)>1) {
stop("Weights of Image wells are different from the weights of the Actual wells. Try generating weights of wells before generating images.")
}
var_type <- ifelse(aquifer$aquifer_type=="confined","D","PHI")
var_name <- ifelse(aquifer$aquifer_type=="confined","hydraulic head","discharge potential")
loc <- wells %>% dplyr::filter(well_image=="Actual",!! group_column==loc_group)
pump_wells <- wells %>% dplyr::filter(!! group_column==pump_group) %>%
dplyr::mutate(Q=!! weights_column / sum((!! weights_column)[well_image=="Actual"])) %>%
loc_potential <- loc %>% dplyr::mutate(potential=get_potential_differential(loc,pump_wells,aquifer = aquifer))
pump_wells <- wells %>% dplyr::filter(!! group_column==pump_group) %>%
dplyr::mutate(Q=!! weights_column / sum((!! weights_column)[well_image=="Actual"])) %>%
loc_potential <- loc %>% dplyr::mutate(potential=get_potential_differential(loc,pump_wells,aquifer = aquifer))
pump_wells <- wells %>% dplyr::filter(!! group_column==pump_group) %>%
dplyr::mutate(Q=!! weights_column / sum((!! weights_column)[well_image=="Actual"]))
pump_wells
View(pump_wells)
pump_wells <- wells %>% dplyr::filter(!! group_column==pump_group) %>%
dplyr::mutate(Q=!! weights_column / sum((!! weights_column)[well_image=="Actual"])) %>%
reconstruct_image_pumping()
View(pump_wells)
loc2 <- wells %>% filter(well_image=="Actual",player=="F") #%>% select(x,y)
wells2 <- wells %>% filter(player=="S")
sum(wells2$Q[wells2$well_image=="Actual"])
sum(pump_wells$Q[wells2$well_image=="Actual"])
(PHI_SF <- get_potential_differential(loc2,wells2,aquifer_confined))# %>% mean())
expect_equal(loc,loc2)
expect_equal(pump_wells %>% select(-Q),wells2 %>% select(-Q))
get_potential_differential(loc,pump_wells,aquifer = aquifer)
devtools::load_all(".")
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
dplyr::mutate(R=1000,  # t = 1 year
player=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(player) %>% mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
wells
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(player) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
player=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(player) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
player=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(player) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
is_sf <- max(grepl("sf",class(wells)))
if (is_sf) {
wells <- wells %>% sf::st_set_geometry(NULL)
}
wells <- wells %>% dplyr::group_by()
group_column <- rlang::enquo(group_column)
weights_column <- rlang::enquo(weights_column)
check_weights <- wells %>% dplyr::select(orig_wID,!! weights_column) %>% dplyr::distinct() %>%
dplyr::group_by(orig_wID) %>%
dplyr::summarize(n=dplyr::n())
if (max(check_weights$n)>1) {
stop("Weights of Image wells are different from the weights of the Actual wells. Try generating weights of wells before generating images.")
}
var_type <- ifelse(aquifer$aquifer_type=="confined","D","PHI")
var_name <- ifelse(aquifer$aquifer_type=="confined","hydraulic head","discharge potential")
loc <- wells %>% dplyr::filter(well_image=="Actual",!! group_column==loc_group)
pump_wells <- wells %>% dplyr::filter(!! group_column==pump_group) %>%
dplyr::mutate(Q=!! weights_column / sum((!! weights_column)[well_image=="Actual"])) %>%
reconstruct_image_pumping()
loc_potential <- loc %>% dplyr::mutate(potential=get_potential_differential(loc,pump_wells,aquifer = aquifer))
weighted_potential <- loc_potential %>% dplyr::group_by() %>%
dplyr::summarize(var=paste(var_type,loc_group,pump_group,sep="_"),
pot=weighted.mean(potential,!! weights_column),
description=paste("Weighted effect of pumping in group",pump_group,"on",var_name,"in group",loc_group))
weighted_potential
# for debugging only:
weights_column <- rlang::quo(weights)
group_column <- rlang::quo(player)
aquifer <- aquifer_confined
loc_group <- "F"
pump_group <- "S"
check_weights <- wells %>% dplyr::select(orig_wID,!! weights_column) %>% dplyr::distinct() %>%
dplyr::group_by(orig_wID) %>%
dplyr::summarize(n=dplyr::n())
if (max(check_weights$n)>1) {
stop("Weights of Image wells are different from the weights of the Actual wells. Try generating weights of wells before generating images.")
}
var_type <- ifelse(aquifer$aquifer_type=="confined","D","PHI")
var_name <- ifelse(aquifer$aquifer_type=="confined","hydraulic head","discharge potential")
loc <- wells %>% dplyr::filter(well_image=="Actual",!! group_column==loc_group)
pump_wells <- wells %>% dplyr::filter(!! group_column==pump_group) %>%
dplyr::mutate(Q=!! weights_column / sum((!! weights_column)[well_image=="Actual"])) %>%
reconstruct_image_pumping()
loc_potential <- loc %>% dplyr::mutate(potential=get_potential_differential(loc,pump_wells,aquifer = aquifer))
weighted_potential <- loc_potential %>% dplyr::group_by() %>%
dplyr::summarize(var=paste(var_type,loc_group,pump_group,sep="_"),
pot=weighted.mean(potential,!! weights_column),
description=paste("Weighted effect of pumping in group",pump_group,"on",var_name,"in group",loc_group))
weighted_potential
devtools::load_all(".")
get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
get_single_drawdown_relationship(wells, aquifer_confined, group_column=player, weights_column=weights,loc_group="S", pump_group="F")
get_single_drawdown_relationship(well_game_images,aquifer_unconfined,player,weights,loc_group="S",pump_group="F")
get_drawdown_relationships(well_game_images,aquifer_unconfined,player,weights)
?get_single_drawdown_relationship
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
player=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(player) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_single_drawdown_relationship(wells, aquifer_confined, group_column=player, weights_column=weights,loc_group="S", pump_group="F")
ggplot() +
geom_segment(data=aquifer_confined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
?get_single_drawdown_relationship
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
ggplot() +
geom_segment(data=aquifer_confined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
get_drawdown_relationships(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
get_drawdown_relationships(wells, aquifer_confined, group_column=country, weights_column=weights)
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
get_drawdown_relationships(wells, aquifer_confined, group_column=country, weights_column=weights)
PHI_FS <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_FS
wells_game %>% filter(player=="F")
well_game_images %>% filter(player=="S")
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
dplyr::mutate(R=get_ROI(Ksat=aquifer_confined$Ksat,h=aquifer_confined$h0,t=3600*24*365,n=0.4,method="aravin-numerov"),  # t = 1 year
country=factor(y>500,levels=c(F,T),labels=c("A","B")),
weights=1)
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
df <- tibble::tibble(var=c("PHI_A_A", "PHI_A_B", "PHI_B_A", "PHI_B_B"),
pot=round(c(8174.94368307291, 7287.70381951019, 7287.70381951019, 8676.87078600676),5))
expect_equal(get_drawdown_relationships(wells,aquifer_confined,country,weights) %>% dplyr::mutate(pot=round(pot,5)) %>% dplyr::select(var,pot),df)
get_drawdown_relationships(wells,aquifer_confined,country,weights) %>% dplyr::mutate(pot=round(pot,5))
get_drawdown_relationships(wells,aquifer_confined,country,weights)$pot
df <- tibble::tibble(var=c("PHI_A_A", "PHI_A_B", "PHI_B_A", "PHI_B_B"),
pot=round(c(1317.4124,242.8351,242.8351,875.3999),5))
expect_equal(get_drawdown_relationships(wells,aquifer_confined,country,weights) %>% dplyr::mutate(pot=round(pot,4)) %>% dplyr::select(var,pot),df)
PHI_FS <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_FF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_unconfined) %>% mean()
PHI_RS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
PHI_RF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
ggplot() +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_point(data=wells_game,aes(x,y,color=player,shape=well_type),size=3,stroke=1) +
scale_shape_manual(values=c(1,16)) #+ scale_size_continuous(limits=c(3,4))
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF) %>%
gather(PHI_ii,Value) %>% knitr::kable(format="html") %>%
kableExtra::kable_styling()
get_drawdown_relationships(well_game_images,aquifer_unconfined,player,weights)
get_drawdown_relationships(well_game_images,aquifer_genevese,player,weights)
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF)
PHI_FS <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_FF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_unconfined) %>% mean()
PHI_RS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
PHI_RF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF) %>%
gather(PHI_ii,Value) %>% knitr::kable(format="html") %>%
kableExtra::kable_styling()
get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined)
get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS
PHI_SF <- get_potential_differential(loc=well_game_images %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_genevese) %>% mean()
PHI_FS <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_RS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
PHI_RF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF) %>%
gather(PHI_ii,Value) %>% knitr::kable(format="html") %>%
kableExtra::kable_styling()
ggplot() +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_point(data=wells_game,aes(x,y,color=player,shape=well_type),size=3,stroke=1) +
scale_shape_manual(values=c(1,16)) #+ scale_size_continuous(limits=c(3,4))
get_single_drawdown_relationship(well_game_images,aquifer_unconfined,player,weights,loc_group="S",pump_group="F") %>% knitr::kable() %>% kableExtra::kable_styling()
get_drawdown_relationships(well_game_images,aquifer_genevese,player,weights) %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
ggplot() +
geom_segment(data=aquifer_confined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationship(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
?kable_styling
?kable
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
drawdown_relationships %>% knitr::kable("html") %>% kableExtra::kable_styling()
