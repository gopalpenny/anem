wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_RS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
PHI_RF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF) %>%
gather(PHI_ii,Value) %>% knitr::kable(format="html") %>%
kableExtra::kable_styling()
ggplot() +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_point(data=wells_game,aes(x,y,color=player,shape=well_type),size=3,stroke=1) +
scale_shape_manual(values=c(1,16)) #+ scale_size_continuous(limits=c(3,4))
get_single_drawdown_relationship(well_game_images,aquifer_unconfined,player,weights,loc_group="S",pump_group="F") %>% knitr::kable() %>% kableExtra::kable_styling()
get_drawdown_relationships(well_game_images,aquifer_genevese,player,weights) %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
ggplot() +
geom_segment(data=aquifer_confined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationship(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
?kable_styling
?kable
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
drawdown_relationships %>% knitr::kable("html") %>% kableExtra::kable_styling()
devtools::install_github("https://github.com/gopalpenny/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
library(tidyverse)
library(anem)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
sqrt(2)
sqrt(2)*1000
devtools::load_all(".")
# devtools::install_github("https://github.com/gopalpenny/anem")
library(tidyverse)
# library(anem)
devtools::load_all("~/Projects/R_packages/anem")
gen_circles(well)
well <- define_wells(
Q=-1,
R=1200,
diam=1,
x=500,
y=500
) %>%
generate_image_wells(aquifer)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# devtools::install_github("https://github.com/gopalpenny/anem")
library(tidyverse)
# library(anem)
devtools::load_all("~/Projects/R_packages/anem")
aquifer <- define_aquifer(
aquifer_type = "confined",
Ksat=1e-4,
z0=10,
bounds=data.frame(bound_type=rep("NF",4),m=c(Inf,0,Inf,0),b=c(0,0,1000,1000))
)
print(aquifer)
well <- define_wells(
Q=-1,
R=1200,
diam=1,
x=500,
y=500
) %>%
generate_image_wells(aquifer)
print(well)
gen_circles(well)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id)) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25 +
geom_polygon(data=gen_circles(well),aes(x,y,group=id,alpha=0.25) +
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
ggplot() +
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) #+
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
gen_circles(well)
well
names(circle)
devtools::load_all(".")
gen_circles(well)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
well <- define_wells(
Q=-1,
R=1100,
diam=1,
x=500,
y=500
) %>%
generate_image_wells(aquifer)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
well <- define_wells(
Q=-1,
R=800,
diam=1,
x=500,
y=500
) %>%
generate_image_wells(aquifer)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
well <- define_wells(
Q=-1,
R=900,
diam=1,
x=500,
y=500
) %>%
generate_image_wells(aquifer)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
coord_equal()
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y),shape=4) +
coord_equal()
loc <- tribble(~x,~y,
750,500,
750,750,
500,500)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y),shape=4) +
coord_equal()
well <- define_wells(
Q=-1,
R=1200,
diam=1,
x=500,
y=500
) %>%
generate_image_wells(aquifer)
loc <- tribble(~x,~y,
750,500,
750,750,
500,500)
ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y),shape=4) +
coord_equal()
```{r confined_plot,fig.width=8}
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y),shape=4) +
coord_equal()
p_aquifer <- p_full + coord_cartesian(xlim=c(0,1000),ylim=c(0,1000))
gridExtra::grid.arrange(p_full,p_aquifer,nrow=1)
?coord_cartesian
p_aquifer <- p_full + coord_equal(xlim=c(0,1000),ylim=c(0,1000))
gridExtra::grid.arrange(p_full,p_aquifer,nrow=1)
loc <- tribble(~x,~y,
750,500,
625,750,
500,500)
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y),shape=4) +
coord_equal()
p_aquifer <- p_full + coord_equal(xlim=c(0,1000),ylim=c(0,1000))
gridExtra::grid.arrange(p_full,p_aquifer,nrow=1)
loc %>% crossing(well %>% mutate(xw=x,yw=y))
loc %>% crossing(well %>% rename(xw=x,yw=y))
loc %>% crossing(well %>% rename(xw=x,yw=y)) %>% mutate(r=sqrt((xw-x)^2+(yw-y)^2)) %>% filter(r<R)
loc %>% crossing(well %>% rename(xw=x,yw=y)) %>% mutate(r=sqrt((xw-x)^2+(yw-y)^2)) %>% filter(pID==1,r<R)
loc <- tribble(~pID,~x,~y,
1, 750, 500,
2, 625, 750,
3, 500, 500)
loc %>% crossing(well %>% rename(xw=x,yw=y)) %>% mutate(r=sqrt((xw-x)^2+(yw-y)^2)) %>% filter(pID==1,r<R)
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>% mutate(r=sqrt((xw-x)^2+(yw-y)^2))#%>% filter(pID==1,r<R)
loc_radii %>% knitr::kable("html")
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>% mutate(r=sqrt((xw-x)^2+(yw-y)^2))
loc_radii %>% filter(pID==1,r<R) %>% knitr::kable("html")
loc_radii %>% filter(pID==1,r<R) %>% select(pID,wID,round(r,1)) %>% knitr::kable("html")
loc %>% crossing(well %>% rename(xw=x,yw=y)) %>%
mutate(r=sqrt((xw-x)^2+(yw-y)^2),r=if_else(r<diam/2,diam/2,r))
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>%
mutate(r=sqrt((xw-x)^2+(yw-y)^2),r=if_else(r<diam/2,diam/2,r)) %>%
filter(r<R) %>%
mutate(`h-h0`=Q/(2*aquifer$Ksat*aquifer$z0)*log(r/R))
loc_radii %>% filter(pID==1,r<R) %>% select(pID,wID,Q,r,`h-h0`) %>% knitr::kable("html")
?kable
get_potential_differential(loc,well,aquifer)
loc
get_potential_differential(loc %>% filter(pID==1),well,aquifer)
well
aquifer
loc
loc
well
aquifer
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>%
mutate(r=sqrt((xw-x)^2+(yw-y)^2),r=if_else(r<diam/2,diam/2,r)) %>%
filter(r<R) %>%
mutate(`h-h0`=-Q/(2*aquifer$Ksat*aquifer$z0)*log(r/R))
loc_radii %>% filter(pID==1,r<R) %>% select(pID,wID,Q,r,`h-h0`) %>% knitr::kable("html",1)
wells <- well
x_well <- wells$x
y_well <- wells$y
R <- wells$R
Q <- wells$Q
diam_wells <- wells$diam
if (max(grepl("data.frame",class(loc)))) {
x_loc <- loc$x
y_loc <- loc$y
} else {
x_loc <- loc[1]
y_loc <- loc[2]
}
ni <- length(x_well) # number of wells
mj <- length(x_loc) # number of locations to measure potential
# create mj x ni matrices -- rows j vary for locations, columns i for wells
xi <- matrix(rep(x_well,each=mj,nrow=ni), ncol=ni) # mj x ni matrix
yi <- matrix(rep(y_well,each=mj,nrow=ni), ncol=ni) # mj x ni matrix
xj <- matrix(rep(x_loc,ni,nrow=ni), ncol=ni)
yj <- matrix(rep(y_loc,ni,nrow=ni), ncol=ni)
Ri <- matrix(rep(R,each=mj),ncol=ni)
Qi <- matrix(rep(Q,each=mj),ncol=ni)
di <- matrix(rep(diam_wells,each=mj),ncol=ni)
x_loc
ni <- length(x_well) # number of wells
mj <- length(x_loc) # number of locations to measure potential
# create mj x ni matrices -- rows j vary for locations, columns i for wells
xi <- matrix(rep(x_well,each=mj,nrow=ni), ncol=ni) # mj x ni matrix
yi <- matrix(rep(y_well,each=mj,nrow=ni), ncol=ni) # mj x ni matrix
xj <- matrix(rep(x_loc,ni,nrow=ni), ncol=ni)
yj <- matrix(rep(y_loc,ni,nrow=ni), ncol=ni)
Ri <- matrix(rep(R,each=mj),ncol=ni)
Qi <- matrix(rep(Q,each=mj),ncol=ni)
di <- matrix(rep(diam_wells,each=mj),ncol=ni)
# rji is the distance between well i and observation location j, with 2 exceptions
# 1. set rji to the radius of influence, R, for any well-location distance that exceeds R
# 2. set rji to the radius of the well, diam/2, for anly location that falls within the radius of the well, diam/2
rji <- pmax(pmin(sqrt((xi-xj)^2 + (yi-yj)^2), Ri), di/2)
aquifer$aquifer_type
dP <- -rowSums(Qi/(2*pi*aquifer$Ksat * aquifer$z0)*log(rji/Ri))
dP
Qi/(2*pi*aquifer$Ksat * aquifer$z0)*log(rji/Ri)
Qi
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>%
mutate(r=sqrt((xw-x)^2+(yw-y)^2),r=if_else(r<diam/2,diam/2,r)) %>%
filter(r<R) %>%
mutate(`h-h0`=-Q/(2*pi*aquifer$Ksat*aquifer$z0)*log(r/R))
loc_radii %>% filter(pID==1,r<R) %>% #select(pID,wID,Q,r,`h-h0`) %>%
knitr::kable("html",1)
sum(loc_radii$`h-h0`)
sum(loc_radii %>% filter(pID==1) %>% pull(`h-h0`))
get_potential_differential(loc %>% filter(pID==1),well,aquifer)
loc_radii_net <- loc_radii %>% group_by(pID) %>% summarize(net=sum(`h-h0`))
loc_radii_net
loc_radii_net$net[loc_radii_net$pID==1]
The sum of $h-h_0$ column is `r loc_radii_net$net[loc_radii_net$pID==1]`. We can compare these results with those from `anem` and `get_potential_differential()`
loc
loc[loc$pID==1,]
loc_radii
View(loc_radii)
loc_radii %>% mutate_if(is.numeric, funs(as.character(signif(., 4)))) %>%
kable(.) %>%
filter(pID==3,r<R) %>% select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
loc_radii %>% mutate_if(is.numeric, funs(as.character(signif(., 4)))) %>%
filter(pID==3,r<R) %>% select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
?signif
loc_radii %>% mutate_if(is.numeric, funs(as.character(signif(., 6)))) %>%
filter(pID==3,r<R) %>% select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
loc_radii %>%
filter(pID==3,r<R)
loc_radii %>%
filter(pID==3,r<R) %>% pull(r)
a <- loc_radii %>%
filter(pID==3,r<R) %>% pull(r)
a[1]
a[2]
loc_radii %>%
filter(pID==3,r<R) %>% pull(r) %>% mutate_if(is.numeric, funs(as.character(signif(., 6)))) %>%
select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
loc_radii %>%
filter(pID==3,r<R) %>% pull(r) %>% mutate_if(is.numeric, funs(as.character(signif(., 1)))) %>%
select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
loc_radii %>%
filter(pID==3,r<R) %>% mutate_if(is.numeric, funs(as.character(signif(., 1)))) %>%
select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
loc_radii %>%
filter(pID==3,r<R) %>% mutate(r=as.character(signif(., 1))) %>%
select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
loc_radii %>%
filter(pID==3,r<R)
loc_radii %>%
filter(pID==3,r<R) %>% mutate(r=as.character(signif(r, 1))) %>%
select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
format
?format
format(c(0.5,1000))
format(c(0.5,1000),digits=1)
format(c(0.5,1000),nsmall=1)
format(c(0.5,1000),nsmall=1,scientific=FALS)
format(c(0.5,1000),nsmall=1,scientific=FALSE)
loc_radii %>%
filter(pID==3,r<R) %>% mutate(r=format(r, scientific=F)) %>%
select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1)
loc_radii %>%
filter(pID==3,r<R) %>% mutate(r=format(r, scientific=F)) %>%
select(pID,wID,Q,well_image,r,`h-h0`) %>%
knitr::kable("html",1,align=c('r','r','r','l','r','r'))
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y,shape="obs")) +
coord_equal()
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y,shape="obs")) +
scale_shape_manual() +
coord_equal()
p_full
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y,shape="obs")) +
scale_shape_manual(values=4) +
coord_equal()
p_full
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y,shape="observation")) +
scale_shape_manual("",values=4) +
coord_equal()
p_full
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y,shape="obs location")) +
scale_shape_manual("",values=4) +
coord_equal()
p_full
p_full <- ggplot() +
geom_segment(data=aquifer$bounds,aes(x1,y1,xend=x2,yend=y2)) +
geom_polygon(data=gen_circles(well),aes(x,y,group=id),alpha=0.25) +
geom_point(data=well,aes(x,y,color=well_image)) +
geom_point(data=loc,aes(x,y,shape="obs location")) +
scale_shape_manual(values=4) +
coord_equal()
p_full
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>%
mutate(r=sqrt((xw-x)^2+(yw-y)^2),r=if_else(r<diam/2,diam/2,r)) %>%
filter(r<R) %>%
mutate(`phi-phi0`=-Q/(pi*aquifer_uconfined$Ksat)*log(r/R))
loc_radii %>% filter(pID==1,r<R) %>% select(pID,wID,Q,well_image,r,`phi-phi0`) %>%
knitr::kable("html",1)
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>%
mutate(r=sqrt((xw-x)^2+(yw-y)^2),r=if_else(r<diam/2,diam/2,r)) %>%
filter(r<R) %>%
mutate(`phi-phi0`=-Q/(pi*aquifer_uconfined$Ksat)*log(r/R))
aquifer_uconfined <- define_aquifer(
aquifer_type="unconfined",
Ksat=1e-4,
bounds=aquifer$bounds
)
loc_radii <- loc %>% crossing(well %>% rename(xw=x,yw=y)) %>%
mutate(r=sqrt((xw-x)^2+(yw-y)^2),r=if_else(r<diam/2,diam/2,r)) %>%
filter(r<R) %>%
mutate(`phi-phi0`=-Q/(pi*aquifer_uconfined$Ksat)*log(r/R))
loc_radii %>% filter(pID==1,r<R) %>% select(pID,wID,Q,well_image,r,`phi-phi0`) %>%
knitr::kable("html",1)
loc_radii_net <- loc_radii %>% group_by(pID) %>% summarize(net=sum(`phi-phi0`))
round(loc_radii_net$net[loc_radii_net$pID==3],3)
