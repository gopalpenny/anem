boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0))
rect_boundaries <- get_rectangular(boundaries) %>% mutate(id=as.factor(row_number()))
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
devtools::load_all()
get_rectangle(boundaries)
round(get_rectangle(boundaries),4)
round(get_rectangle(boundaries),2)
rect_boundaries <- get_rectangle(boundaries)
paste(rect_boundaries$m,collapse=",")
paste(round(get_rectangle(boundaries)$m,4),collapse=",")
paste(round(get_rectangle(boundaries)$b,4),collapse=",")
tibble::tibble(m=c(0.9091,-1.1,0.9091,-1.1),b=c(0.4545,22.15,-2.3636,0.05))
round(get_rectangle(boundaries)$b,4)
round(get_rectangle(boundaries),4)
round(get_rectangle(boundaries),4)
expect_equal(round(get_rectangle(boundaries),4),tibble::tibble(m=c(0.9091,-1.1,0.9091,-1.1),b=c(0.4545,22.15,-2.3636,0.05)))
round(get_rectangle(boundaries),4)
round(get_rectangle(boundaries),4)$m
round(get_rectangle(boundaries),4)$b
?if_else
quat_vertices <- get_quad_vertices(boundaries)
quad_vertices <- get_quad_vertices(boundaries)
quad_vertices
devtools::document()
devtools::load_all()
?get_quad_vertices
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0))
quad_vertices <- get_quad_vertices(boundaries)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_point(data=quad_vertices,aes(x,y,shape=bound_id,color=bound_id))
devtools::load_all()
devtools::document()
?get_quad_vertices
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0))
quad_vertices <- get_quad_vertices(boundaries)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_point(data=quad_vertices,aes(x,y,shape=as.factor(bound_id),color=as.factor(bound_id)))
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_point(data=quad_vertices,aes(x,y,shape=as.factor(bound_id),color=as.factor(bound_id)),size=4)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_point(data=quad_vertices,aes(x,y,shape=as.factor(bound_id),color=as.factor(bound_id)),size=4) +
scale_shape_manual(values=1:4)
geom_point(data=quad_vertices,aes(x,y,shape=as.factor(bound_id),color=as.factor(bound_id)),size=4,stroke=2) +
scale_shape_manual(values=1:4)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_point(data=quad_vertices,aes(x,y,shape=as.factor(bound_id),color=as.factor(bound_id)),size=4) +
scale_shape_manual(values=1:4)
boundaries
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0),bID=row_number())
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0),bID=row_number())
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
boundaries
bounds_w_slope <- boundaries %>%
dplyr::mutate(m=(y2-y1)/(x2-x1),
b=y1 - m*x1) %>% dplyr::select(-x1,-y1,-x2,-y2) %>%
dplyr::arrange(desc(m))# %>%
bounds_w_slope <- boundaries %>%
dplyr::mutate(m=(y2-y1)/(x2-x1),
b=y1 - m*x1) %>% dplyr::select(-x1,-y1,-x2,-y2) %>%
dplyr::arrange(desc(m))# %>%
bounds_w_slope
boundaries
bounds_w_slope <- boundaries %>%
dplyr::mutate(m=(y2-y1)/(x2-x1),
b=y1 - m*x1) %>% dplyr::select(-x1,-y1,-x2,-y2) %>%
dplyr::arrange(desc(m))# %>%
# dplyr::mutate(slope_id=row_number())
vertices <- bounds_w_slope %>%
tidyr::crossing(bounds_w_slope %>% dplyr::rename(m2=m,b2=b,bID2=bID)) %>%
dplyr::mutate(x=round(get_intersection(m,b,m2,b2)$x,14), # round to avoid math errors that make points seem different
y=round(get_intersection(m,b,m2,b2)$y,14)) %>%
dplyr::select(bID,bID2,x,y) %>% dplyr::filter(!is.nan(x))
vertices_of_quad_midpoints <- vertices %>%
dplyr::group_by(bID) %>%
dplyr::summarize(x=get_point_on_quandrangle(x),
y=get_point_on_quandrangle(y)) %>%
dplyr::left_join(vertices,by=c("bID","x","y")) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID"))
vertices_of_quad_midpoints
bounds_w_slope <- boundaries %>%
dplyr::mutate(m=(y2-y1)/(x2-x1),
b=y1 - m*x1) %>% dplyr::select(-x1,-y1,-x2,-y2) %>%
dplyr::arrange(desc(m))
vertices <- bounds_w_slope %>%
tidyr::crossing(bounds_w_slope %>% dplyr::rename(m2=m,b2=b,bID2=bID)) %>%
dplyr::mutate(x=round(get_intersection(m,b,m2,b2)$x,14), # round to avoid math errors that make points seem different
y=round(get_intersection(m,b,m2,b2)$y,14)) %>%
dplyr::select(bID,bID2,x,y) %>% dplyr::filter(!is.nan(x))
vertices_of_quad_midpoints <- vertices %>%
dplyr::group_by(bID) %>%
dplyr::summarize(x=get_point_on_quandrangle(x),
y=get_point_on_quandrangle(y)) %>%
dplyr::left_join(vertices,by=c("bID","x","y")) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID"))
segments_remaining <- vertices_of_quad_midpoints %>%
dplyr::select(-orig) %>%
dplyr::distinct() %>%
dplyr::group_by(bID) %>%
dplyr::summarize(n=dplyr::n()) %>%
dplyr::filter(n==1)
segments_remaining
vertices_of_quad_midpoints
vertices_of_quad_midpoints %>%
dplyr::select(-orig) %>%
dplyr::distinct() %>%
dplyr::group_by(bID)
vertices_of_quad_midpoints %>%
dplyr::select(-orig) %>%
dplyr::distinct() %>%
dplyr::group_by(bID) %>%
dplyr::summarize(n=dplyr::n())
vertices_of_quad_midpoints %>%
dplyr::select(-orig) %>%
dplyr::distinct() %>%
dplyr::group_by(bID) %>%
dplyr::summarize(n=dplyr::n()) %>%
dplyr::filter(n==1)
segments_remaining <- vertices_of_quad_midpoints %>%
dplyr::select(-orig) %>%
dplyr::distinct() %>%
dplyr::group_by(bID) %>%
dplyr::summarize(n=dplyr::n()) %>%
dplyr::filter(n==1)
segments_remaining
vertices_of_quad_midpoints <- vertices %>%
dplyr::group_by(bID) %>%
dplyr::summarize(x=get_point_on_quandrangle(x),
y=get_point_on_quandrangle(y)) %>%
dplyr::left_join(vertices,by=c("bID","x","y")) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID"))
segments_remaining <- vertices_of_quad_midpoints %>%
dplyr::select(-orig) %>%
dplyr::distinct() %>%
dplyr::group_by(bID) %>%
dplyr::summarize(n=dplyr::n()) %>%
dplyr::filter(n==1)
vertices_of_quad <- vertices %>%
dplyr::filter(bID==segments_remaining$bID[1],bID2==segments_remaining$bID[2]) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID")) %>%
dplyr::bind_rows(vertices_of_quad_midpoints) %>%
dplyr::select(-orig,-bID) %>% dplyr::distinct()# %>% mutate(keep=TRUE)
vertices_of_quad
vertices_of_quad <- vertices %>%
dplyr::filter(bID==segments_remaining$bID[1],bID2==segments_remaining$bID[2]) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID")) %>%
dplyr::bind_rows(vertices_of_quad_midpoints) %>%
dplyr::select(-orig,-bID) %>% dplyr::distinct()# %>% mutate(keep=TRUE)
vertices_of_quad
vertices %>%
dplyr::filter(bID==segments_remaining$bID[1],bID2==segments_remaining$bID[2])
vertices %>%
dplyr::filter(bID==segments_remaining$bID[1],bID2==segments_remaining$bID[2]) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID")) %>%
dplyr::bind_rows(vertices_of_quad_midpoints) %>%
dplyr::select(-orig,-bID) %>% dplyr::distinct()# %>% mutate(keep=TRUE)
vertices_of_quad <- vertices %>%
dplyr::filter(bID==segments_remaining$bID[1],bID2==segments_remaining$bID[2]) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID")) %>%
dplyr::bind_rows(vertices_of_quad_midpoints) %>%
dplyr::select(-orig,-bID) %>% dplyr::distinct()# %>% mutate(keep=TRUE)
quad_vertices_full <- vertices %>% dplyr::inner_join(vertices_of_quad,by=c("x","y")) %>%
dplyr::rename(intersection_id=bID2) %>%
tidyr::complete(bID,intersection_id) %>%
dplyr::filter(bID!=intersection_id)
quad_vertices_full
#' rectangle is determined by (1) identifying the quadrangle of the input \code{boundaries}, (2)
#' selecting the midpoints of each edge of the quadrangle, (3) determining the "long" axis of the
#' quadrangle, which becomes the long axis of the rectangle, (4) calculating the slope of the long
#' and short axes of the rectangle (at right angles), then generating lines with these slopes through
#' the midpoints.
#' @examples
#' boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0))
#' rect_boundaries <- get_rectangle(boundaries) %>% mutate(id=as.factor(row_number()))
#' ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
#'   geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
get_rectangle <- function(boundaries){
# get vertices
quad_vertices_full <- get_quad_vertices(boundaries)
# get midpoints of boundaries
midpoints <- quad_vertices_full %>% dplyr::group_by(bID) %>%
dplyr::summarize(x_mid=mean(x,na.rm=TRUE),
y_mid=mean(y,na.rm=TRUE),
opposite_bID=intersection_bID[is.na(x)])
# get slope of of long and short axes
slopes <- midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("_id")) %>%
dplyr::select(bID,m,m2)
# get boundaries as m, b
bounds_rectangular <- midpoints %>%
dplyr::left_join(slopes %>% dplyr::select(-m) %>% dplyr::rename(m=m2),by="bID") %>%
dplyr::mutate(m=dplyr::if_else(!is.na(m),m,slopes$m[1])) %>%
dplyr::mutate(b=y_mid - m*x_mid) %>% dplyr::select(m,b)
return(bounds_rectangular)
}
#' @importFrom magrittr %>%
#' @return Returns a data.frame vertices for each of the 4 boundaries. The boundaries
#' are given an id, and there is one row in the output which identifies the opposide bound
#' (with which there is no intersection).
#' @examples
#' boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
#' quad_vertices <- get_quad_vertices(boundaries)
#' ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
#'   geom_point(data=quad_vertices,aes(x,y,shape=as.factor(bID),color=as.factor(bID)),size=4) +
#'   scale_shape_manual(values=1:4)
get_quad_vertices <- function(boundaries) {
bounds_w_slope <- boundaries %>%
dplyr::mutate(m=(y2-y1)/(x2-x1),
b=y1 - m*x1) %>% dplyr::select(-x1,-y1,-x2,-y2) %>%
dplyr::arrange(desc(m))
vertices <- bounds_w_slope %>%
tidyr::crossing(bounds_w_slope %>% dplyr::rename(m2=m,b2=b,bID2=bID)) %>%
dplyr::mutate(x=round(get_intersection(m,b,m2,b2)$x,14), # round to avoid math errors that make points seem different
y=round(get_intersection(m,b,m2,b2)$y,14)) %>%
dplyr::select(bID,bID2,x,y) %>% dplyr::filter(!is.nan(x))
vertices_of_quad_midpoints <- vertices %>%
dplyr::group_by(bID) %>%
dplyr::summarize(x=get_point_on_quandrangle(x),
y=get_point_on_quandrangle(y)) %>%
dplyr::left_join(vertices,by=c("bID","x","y")) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID"))
segments_remaining <- vertices_of_quad_midpoints %>%
dplyr::select(-orig) %>%
dplyr::distinct() %>%
dplyr::group_by(bID) %>%
dplyr::summarize(n=dplyr::n()) %>%
dplyr::filter(n==1)
vertices_of_quad <- vertices %>%
dplyr::filter(bID==segments_remaining$bID[1],bID2==segments_remaining$bID[2]) %>%
tidyr::gather(orig,bID,dplyr::starts_with("bID")) %>%
dplyr::bind_rows(vertices_of_quad_midpoints) %>%
dplyr::select(-orig,-bID) %>% dplyr::distinct()# %>% mutate(keep=TRUE)
quad_vertices_full <- vertices %>% dplyr::inner_join(vertices_of_quad,by=c("x","y")) %>%
dplyr::rename(intersection_bID=bID2) %>%
tidyr::complete(bID,intersection_bID) %>%
dplyr::filter(bID!=intersection_bID)
return(quad_vertices_full)
}
#' Get point on quadrangle
#'
#' The complete quadrangle is comprised of 6 vertices (intersection points)
#' of the edges of the quadrangle. But only 4 of these are the vertices of
#' the quadrangle. See http://mathworld.wolfram.com/CompleteQuadrilateral.html.
#' If a line has 3 intersection points, the middle one is definitely a vertex
#' of the quadrangle. If less than 3, then both are intersection points.
#' Choose the second one.
get_point_on_quandrangle <- function(vec) {
if (length(vec)>1) {
point <- sort(vec)[2]
}
return(point)
}
#' Get intersection of two lines specified by slope m and intercept, b
get_intersection <- function(m1,b1,m2,b2) {
x <- (b2-b1)/(m1-m2)
y <- m2*x + b2
intersections <- data.frame(x=x,y=y)
return(intersections)
}
devtoo
devtools::document()
?get_rectangle
devtools::document()
?get_rectangle
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
rect_boundaries <- get_rectangle(boundaries) %>% mutate(id=as.factor(row_number()))
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
# get vertices
quad_vertices_full <- get_quad_vertices(boundaries)
quad_vertices_full
# get slope of of long and short axes
slopes <- midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("_id")) %>%
dplyr::select(bID,m,m2)
slopes
# get vertices
quad_vertices_full <- get_quad_vertices(boundaries)
quad_vertices_full
# get midpoints of boundaries
midpoints <- quad_vertices_full %>% dplyr::group_by(bID) %>%
dplyr::summarize(x_mid=mean(x,na.rm=TRUE),
y_mid=mean(y,na.rm=TRUE),
opposite_bID=intersection_bID[is.na(x)])
midpoints
rm(list=ls())
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
rect_boundaries <- get_rectangle(boundaries) %>% mutate(id=as.factor(row_number()))
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
rect_boundaries <- get_rectangle(boundaries)
rect_boundaries
boundaries
rect_boundaries
# get boundaries as m, b
bounds_rectangular <- midpoints %>%
dplyr::left_join(slopes %>% dplyr::select(-m) %>% dplyr::rename(m=m2),by="bID") %>%
dplyr::mutate(m=dplyr::if_else(!is.na(m),m,slopes$m[1])) %>%
dplyr::mutate(b=y_mid - m*x_mid) %>% dplyr::select(m,b,bID)
#' rectangle is determined by (1) identifying the quadrangle of the input \code{boundaries}, (2)
#' selecting the midpoints of each edge of the quadrangle, (3) determining the "long" axis of the
#' quadrangle, which becomes the long axis of the rectangle, (4) calculating the slope of the long
#' and short axes of the rectangle (at right angles), then generating lines with these slopes through
#' the midpoints.
#' @examples
#' boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
#' rect_boundaries <- get_rectangle(boundaries)
#' ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
#'   geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
get_rectangle <- function(boundaries){
# get vertices
quad_vertices_full <- get_quad_vertices(boundaries)
# get midpoints of boundaries
midpoints <- quad_vertices_full %>% dplyr::group_by(bID) %>%
dplyr::summarize(x_mid=mean(x,na.rm=TRUE),
y_mid=mean(y,na.rm=TRUE),
opposite_bID=intersection_bID[is.na(x)])
# get slope of of long and short axes
slopes <- midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("_id")) %>%
dplyr::select(bID,m,m2)
# get boundaries as m, b
bounds_rectangular <- midpoints %>%
dplyr::left_join(slopes %>% dplyr::select(-m) %>% dplyr::rename(m=m2),by="bID") %>%
dplyr::mutate(m=dplyr::if_else(!is.na(m),m,slopes$m[1])) %>%
dplyr::mutate(b=y_mid - m*x_mid) %>% dplyr::select(m,b,bID)
return(bounds_rectangular)
}
devtools::load_all()
?get_rectangle
devtools
devtools::document()
?get_rectangle
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
rect_boundaries <- get_rectangle(boundaries)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
rect_boundaries <- get_rectangle(boundaries)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
rect_boundaries
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=bID))
#' @return Returns a data.frame containing slope and intercept for four edges of a rectangle. The
#' rectangle is determined by (1) identifying the quadrangle of the input \code{boundaries}, (2)
#' selecting the midpoints of each edge of the quadrangle, (3) determining the "long" axis of the
#' quadrangle, which becomes the long axis of the rectangle, (4) calculating the slope of the long
#' and short axes of the rectangle (at right angles), then generating lines with these slopes through
#' the midpoints.
#' @examples
#' boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
#' rect_boundaries <- get_rectangle(boundaries)
#' ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=as.factor(bID)))
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=as.factor(bID)))
# get vertices
quad_vertices_full <- get_quad_vertices(boundaries)
# get midpoints of boundaries
midpoints <- quad_vertices_full %>% dplyr::group_by(bID) %>%
dplyr::summarize(x_mid=mean(x,na.rm=TRUE),
y_mid=mean(y,na.rm=TRUE),
opposite_bID=intersection_bID[is.na(x)])
# get slope of of long and short axes
slopes <- midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("_id")) %>%
dplyr::select(bID,m,m2)
slopes
midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m)
midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("_id"))
midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("bID"))
# get slope of of long and short axes
slopes <- midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("bID")) %>%
dplyr::select(bID,m,m2)
slopes
devtools::load_all()
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
rect_boundaries <- get_rectangle(boundaries)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=id))
?get_rectangle
devtools::document()
devtools::document()
?get_recangle
?get_rectangle
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
rect_boundaries <- get_rectangle(boundaries)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=as.factor(bID)))
#' rectangle is determined by (1) identifying the quadrangle of the input \code{boundaries}, (2)
#' selecting the midpoints of each edge of the quadrangle, (3) determining the "long" axis of the
#' quadrangle, which becomes the long axis of the rectangle, (4) calculating the slope of the long
#' and short axes of the rectangle (at right angles), then generating lines with these slopes through
#' the midpoints.
#' @examples
#' boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
#' rect_boundaries <- get_rectangle(boundaries)
#' ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
#' geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=as.factor(bID)))
get_rectangle <- function(boundaries) {
# get vertices
quad_vertices_full <- get_quad_vertices(boundaries)
# get midpoints of boundaries
midpoints <- quad_vertices_full %>% dplyr::group_by(bID) %>%
dplyr::summarize(x_mid=mean(x,na.rm=TRUE),
y_mid=mean(y,na.rm=TRUE),
opposite_bID=intersection_bID[is.na(x)])
# get slope of of long and short axes
slopes <- midpoints %>%
dplyr::left_join(midpoints %>% dplyr::select(-bID) %>%
dplyr::rename(bID=opposite_bID,x_mid2=x_mid,y_mid2=y_mid)) %>%
dplyr::mutate(dist=sqrt((x_mid2-x_mid)^2+(y_mid2-y_mid)^2))%>%
dplyr::filter(dist==max(dist)) %>% dplyr::slice(1) %>%
dplyr::mutate(m=(y_mid2-y_mid)/(x_mid2-x_mid),
m2=-1/m) %>%
tidyr::gather(var,bID,dplyr::ends_with("bID")) %>%
dplyr::select(bID,m,m2)
# get boundaries as m, b
bounds_rectangular <- midpoints %>%
dplyr::left_join(slopes %>% dplyr::select(-m) %>% dplyr::rename(m=m2),by="bID") %>%
dplyr::mutate(m=dplyr::if_else(!is.na(m),m,slopes$m[1])) %>%
dplyr::mutate(b=y_mid - m*x_mid) %>% dplyr::select(m,b,bID)
return(bounds_rectangular)
}
rect_boundaries <- get_rectangle(boundaries)
rect_boundaries
devtools::load_all()
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=as.factor(bID)))
boundaries <- data.frame(x1=c(0,10,13,1),y1=c(0,10,9,-1),x2=c(10,13,1,0),y2=c(10,9,-1,0)) %>% mutate(bID=row_number())
rect_boundaries <- get_rectangle(boundaries)
ggplot() + geom_segment(data=boundaries,aes(x1,y1,xend=x2,yend=y2)) +
geom_abline(data=rect_boundaries,aes(slope=m,intercept=b,color=as.factor(bID)))
devtools
devtools::document()
?get_rectangle
devtools::document()
?get_rectangle
round(get_rectangle(boundaries),4)
tibble::tibble(m=c(0.9091,-1.1,0.9091,-1.1),b=c(0.4545,22.15,-2.3636,0.05),bID=1:4)
bounds_w_slope <- get_rectangular(boundaries)
bounds_w_slope <- get_rectangle(boundaries)
{
bounds_w_slope <- get_rectangle(boundaries)
}
bounds_w_slope
bounds_w_slope <- boundaries %>%
dplyr::mutate(m=(y2-y1)/(x2-x1),
b=y1 - m*x1) %>% dplyr::select(-x1,-y1,-x2,-y2)
bounds_w_slope
# install.packages(".", repos = NULL, type="source")
# library(anema)
library(magrittr)
library(sf)
library(tidyverse)
devtools::load_all("~/Projects/R_packages/anem")
getwd()
list.files("../../../genevois")
getwd()
list.files("../../../")
