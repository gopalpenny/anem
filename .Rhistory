kableExtra::kable_styling()
get_drawdown_relationships(well_game_images,aquifer_unconfined,player,weights)
get_drawdown_relationships(well_game_images,aquifer_genevese,player,weights)
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF)
PHI_FS <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_FF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_unconfined) %>% mean()
PHI_RS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
PHI_RF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF) %>%
gather(PHI_ii,Value) %>% knitr::kable(format="html") %>%
kableExtra::kable_styling()
get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined)
get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS
PHI_SF <- get_potential_differential(loc=well_game_images %>% filter(well_image=="Actual",player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="F"),
aquifer_genevese) %>% mean()
PHI_FS <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_SS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="S"),
aquifer_unconfined) %>% mean()
PHI_RS <- get_potential_differential(loc=wells_game %>% filter(player=="S") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
PHI_RF <- get_potential_differential(loc=wells_game %>% filter(player=="F") %>% select(x,y),
wells=well_game_images %>% filter(player=="Recharge"),
aquifer_unconfined) %>% mean()
data.frame(PHI_SF=PHI_SF,PHI_FS=PHI_FS,PHI_SS=PHI_SS,PHI_FF=PHI_FF,PHI_RS=PHI_RS,PHI_RF=PHI_RF) %>%
gather(PHI_ii,Value) %>% knitr::kable(format="html") %>%
kableExtra::kable_styling()
ggplot() +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_point(data=wells_game,aes(x,y,color=player,shape=well_type),size=3,stroke=1) +
scale_shape_manual(values=c(1,16)) #+ scale_size_continuous(limits=c(3,4))
get_single_drawdown_relationship(well_game_images,aquifer_unconfined,player,weights,loc_group="S",pump_group="F") %>% knitr::kable() %>% kableExtra::kable_styling()
get_drawdown_relationships(well_game_images,aquifer_genevese,player,weights) %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_confined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_confined)
ggplot() +
geom_segment(data=aquifer_confined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_single_drawdown_relationship(wells, aquifer_confined, group_column=country, weights_column=weights,loc_group="S", pump_group="F")
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("S","F"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationship(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::load_all()
library(tidyverse)
library(sf)
# devtools::load_all("~/Projects/R_packages/anem")
# devtools::install_github("https://github.com/gopalpenny/anem")
# library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
?kable_styling
?kable
drawdown_relationships %>% knitr::kable() %>% kableExtra::kable_styling()
drawdown_relationships %>% knitr::kable("html") %>% kableExtra::kable_styling()
install.packages("rio")
rio::install_formats()
getwd()
setwd("/Users/gopal/Projects/sesync_LSLA/lsla/src/prep")
import("../../data/orig/from_nathan/ramankutty2002suit5min.mat")
rio::import("../../data/orig/from_nathan/ramankutty2002suit5min.mat")
ramank <- rio::import("../../data/orig/from_nathan/ramankutty2002suit5min.mat")
head(ramank)
class(ramank)
ramank[[1]]
View(ramank)
names(ramank)
setwd("/Users/gopal/Projects/GangesBrahmaputraProject/gbb_github/src/proc")
abc <- read.fwf("~/Downloads/SRINAGAR.cli")
abc <- read_fwf("~/Downloads/SRINAGAR.cli")
abc <- readr::read_fwf("~/Downloads/SRINAGAR.cli")
abc <- readr::read_fwf("~/Downloads/SRINAGAR.cli",skip=1)
abc <- readr::readr_example("~/Downloads/SRINAGAR.cli",skip=1)
abc <- readr::readr_example("~/Downloads/SRINAGAR.cli")
abc <- readr::read_fwf("~/Downloads/SRINAGAR.cli",skip=1)
abc <- readr::readr_example("~/Downloads/SRINAGAR.cli")
file.exists("~/Downloads/SRINAGAR.cli")
abc <- readr::read_fwf("~/Downloads/SRINAGAR.cli",skip=1)
?read.fwf
abc <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1)
View(abc)
def <- readr::read.fwf("~/Downloads/SRINAGAR.pen",rep(10,7),skip=1)
def <- read.fwf("~/Downloads/SRINAGAR.pen",rep(10,7),skip=1)
View(def)
library(tidyverse)
def <- read_csv("~/Downloads/SRINAGAR.pen",n_max = 1)
def <- read_csv("~/Downloads/SRINAGAR.pen",n_max = 1,col_names = FALSE)
def
def <- read_csv("~/Downloads/SRINAGAR.cli",n_max = 1,col_names = FALSE)
def
climate_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1)
climate_header <- read_csv("~/Downloads/SRINAGAR.cli",n_max = 1,col_names = FALSE)
rainfall_df <- read.fwf("~/Downloads/SRINAGAR.pen",rep(10,7),skip=1)
rainfall_header <- read_csv("~/Downloads/SRINAGAR.pen",n_max = 1,col_names = FALSE)
View(rainfall_df)
c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day","sunshine_hrs_day","solar_radiation_MJ_m2_day")
pen_cols <- c("rainfall","x1","rainfall_effective","x2","ref_ET")
climate_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = clim_cols)
climate_header <- read_csv("~/Downloads/SRINAGAR.cli",n_max = 1,col_names = FALSE)
rainfall_df <- read.fwf("~/Downloads/SRINAGAR.pen",rep(10,7),skip=1,col.names = pen_cols)
rainfall_header <- read_csv("~/Downloads/SRINAGAR.pen",n_max = 1,col_names = FALSE)
climate_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = clim_cols)
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET")
climate_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = clim_cols)
climate_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = cli_cols)
climate_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = cli_cols,header=FALSE)
View(rainfall_df)
climate_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = pen_cols,header=FALSE)
climate_header <- read_csv("~/Downloads/SRINAGAR.cli",n_max = 1,col_names = FALSE)
rainfall_df <- read.fwf("~/Downloads/SRINAGAR.pen",rep(10,7),skip=1,col.names = cli_cols)
rainfall_header <- read_csv("~/Downloads/SRINAGAR.pen",n_max = 1,col_names = FALSE)
View(rainfall_df)
rainfall_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = pen_cols,header=FALSE)
rainfall_header <- read_csv("~/Downloads/SRINAGAR.cli",n_max = 1,col_names = FALSE)
climate_df <- read.fwf("~/Downloads/SRINAGAR.pen",rep(10,7),skip=1,col.names = cli_cols)
climate_header <- read_csv("~/Downloads/SRINAGAR.pen",n_max = 1,col_names = FALSE)
View(rainfall_df)
View(climate_header)
View(climate_df)
pen_cols <- c("ref_ET","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf("~/Downloads/SRINAGAR.cli",c(10,16,10),skip=1,col.names = pen_cols,header=FALSE)
rainfall_header <- read_csv("~/Downloads/SRINAGAR.cli",n_max = 1,col_names = FALSE)
View(rainfall_df)
rainfall_header
climate_header
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
climate_meta <- read_csv("~/Downloads/SRINAGAR.pen",n_max = 1,col_names = cli_meta_cols)
View(climate_meta)
View(rainfall_df)
View(rainfall_header)
directory_path <- "~/Downloads"
station_name <- "SRINAGAR"
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE)
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
View(rainfall_df)
climate_meta
View(rainfall_header)
rainfall_df
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(one_of(pen_cols))
rainfall_df
pen_cols
rainfall_df <- read.fwf(cli_path,c(10,1,16,1,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(one_of(pen_cols))
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(one_of(pen_cols))
?select
?starts_with
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_df
?mutate_at
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli=ref_ET_pen)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen)
climate <- bind_cols(rainfall_df,climate_meta)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen)
rainfall_df
climate_meta
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen)
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen)
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen)
check_climate
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=min(rainfall_check),
ET_check=min(ET_check))
check_climate
check_climate %>% pluck("ET_check")
check_climate %>% pluck(c("ET_check","rainfall_check"))
check_climate %>% map_lgl()
check_climate %>% map_lgl(as.logical)
check_climate %>% map_lgl(as.logical) %>% every()
climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check),
ET_check=every(ET_check))
climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
check_climate %>% map_lgl(as.logical) %>% min()
check_climate %>% map_lgl(as.logical) #%>% min()
climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
check_climate
class(climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
check_climate)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
check_climate
class(check_climate)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
class(check_climate)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
class(check_climate)
check_climate
sum(check_climate)
min(check_climate)
check_climate %>% map_lgl(as.logical) #%>% min()
check_climate %>% map_lgl(as.logical) #%>% min()
check_climate
check_climate[1]
check_climate[2]
class(check_climate)
names(check_climate)
?map_lgl
check_climate %>% map_lgl(as.logical) #%>% min()
map_lgl(check_climate,as.logical)
check_climate %>% map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
min(check_climate)
check_climate %>% map_lgl(as.logical) #%>% min()
min(check_climate)
check_climate %>% map_lgl(as.logical) %>% min()
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE))
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
check_climate %>% map_lgl(as.logical) #%>% min()
check_climate
class(check_climate)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
check_climate %>% map_lgl(as.logical) #%>% min()
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
check_climate
class(check_climate)
typeof(check_climate)
min(check_climate)
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
check_climate
climate
read_CLIMWAT <- function(directory_path,station_name) {
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
return(climate %>% select(ref_ET_cli) %>% rename(ref_ET=ref_ET_pen))
}
read_CLIMWAT(directory_path,station_name)
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
read_CLIMWAT <- function(directory_path,station_name) {
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
return(climate %>% select(-ref_ET_cli) %>% rename(ref_ET=ref_ET_pen))
}
read_CLIMWAT(directory_path,station_name)
climate <- climate_prep %>% select(-ref_ET_cli) %>% rename(ref_ET=ref_ET_pen)
read_CLIMWAT <- function(directory_path,station_name) {
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate_prep <- bind_cols(rainfall_df,climate_df)
check_climate <- climate_prep %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
climate <- climate_prep %>% select(-ref_ET_cli) %>% rename(ref_ET=ref_ET_pen)
return(list(climate=climate,meta=climate_meta))
}
read_CLIMWAT(directory_path,station_name)
read_CLIMWAT(directory_path,station_name)
