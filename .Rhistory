check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
check_climate
class(check_climate)
typeof(check_climate)
min(check_climate)
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
check_climate
climate
read_CLIMWAT <- function(directory_path,station_name) {
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
return(climate %>% select(ref_ET_cli) %>% rename(ref_ET=ref_ET_pen))
}
read_CLIMWAT(directory_path,station_name)
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
read_CLIMWAT <- function(directory_path,station_name) {
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate <- bind_cols(rainfall_df,climate_df)
check_climate <- climate %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
return(climate %>% select(-ref_ET_cli) %>% rename(ref_ET=ref_ET_pen))
}
read_CLIMWAT(directory_path,station_name)
climate <- climate_prep %>% select(-ref_ET_cli) %>% rename(ref_ET=ref_ET_pen)
read_CLIMWAT <- function(directory_path,station_name) {
cli_path <- file.path(directory_path,paste0(station_name,".cli"))
pen_path <- file.path(directory_path,paste0(station_name,".pen"))
cli_cols <- c("Temp_C_daily_max","Temp_C_daily_min","rel_humidity","wind_km_day",
"sunshine_hrs_day","solar_radiation_MJ_m2_day","ref_ET_cli")
cli_meta_cols <- c("Nr","Name","Alt_m","Lat","x1","Lon","x2")
pen_cols <- c("ref_ET_pen","x2","rainfall","x1","rainfall_effective")
rainfall_df <- read.fwf(cli_path,c(10,16,10),skip=1,col.names = pen_cols,header=FALSE) %>%
select(-matches("x[12]"))
rainfall_header <- read_csv(cli_path,n_max = 1,col_names = FALSE)
climate_df <- read.fwf(pen_path,rep(10,7),skip=1,col.names = cli_cols)
climate_meta <- read_csv(pen_path,n_max = 1,col_names = cli_meta_cols)
climate_prep <- bind_cols(rainfall_df,climate_df)
check_climate <- climate_prep %>%
mutate(rainfall_check=rainfall_effective<rainfall,
ET_check=ref_ET_cli==ref_ET_pen) %>%
summarize(rainfall_check=every(rainfall_check,isTRUE),
ET_check=every(ET_check,isTRUE)) %>%
map_lgl(as.logical) #%>% min()
if (min(check_climate)==0) {
stop("One of the climate checks failed")
}
climate <- climate_prep %>% select(-ref_ET_cli) %>% rename(ref_ET=ref_ET_pen)
return(list(climate=climate,meta=climate_meta))
}
read_CLIMWAT(directory_path,station_name)
read_CLIMWAT(directory_path,station_name)
library(tidyverse)
library(sf)
# devtools::install_github("https://github.com/gopalpenny/anem")
# devtools::load_all("~/Projects/R_packages/anem")
library(anem)
devtools::install()
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(100,150),flow_dim=c(15,10))
?get_gridded_hydrodynamics
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::install()
library(tidyverse)
library(sf)
# devtools::install_github("https://github.com/gopalpenny/anem")
# devtools::load_all("~/Projects/R_packages/anem")
library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
print(aquifer_unconfined)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
print(wells)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable("html") %>% kableExtra::kable_styling()
pts_wgs <- genevese_wells
pts_wgs
boundaries_wgs <- genevese_bounds
boundaries_wgs
utm_zone <- longitude_to_utm_zone(mean(st_coordinates(pts_wgs)[,'X']))
utm_proj4 <- utm_zone_to_proj4(utm_zone)
pts_utm <- pts_wgs %>% sf::st_transform(utm_proj4)
boundaries_utm <- boundaries_wgs %>% sf::st_transform(utm_proj4)
ggplot() +
geom_sf(data=boundaries_utm, aes()) +
geom_sf(data=pts_utm, aes())
# bounds <- define_bounds(boundaries_utm)
aquifer_confined <- define_aquifer("confined",1e-3,bounds=boundaries_utm,h0=100,z0=10)
print(aquifer_confined)
bounds_polygon <- aquifer_confined$bounds %>%
summarize() %>% st_polygonize() %>% st_collection_extract("POLYGON")
wells_df_in_aquifer <- pts_utm %>% st_intersection(bounds_polygon) %>% group_by()
wells_df <- wells_df_in_aquifer %>%
mutate(Q=-1e-1/n(),
Q=if_else(well_group=="COMMUNE",-2*Q,Q))  %>%
mutate(R=get_ROI(Ksat=1e-4,h=100,t=3600*24*365*20,n=0.4,method="aravin-numerov"))
wells <- define_wells(wells_df)
ggplot() +
geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray") +
geom_sf(data=aquifer_confined$bounds, aes(color=as.factor(round(m,1)))) +
geom_point(data=wells, aes(x,y))
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(100,150),flow_dim=c(15,10))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_point(data=wells, aes(x,y),shape=1,stroke=1) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_segment(data=flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
coord_equal() +
scale_shape_manual(values=c(1,16),limits=c(3,4))
aquifer_unconfined <- define_aquifer("unconfined",Ksat=0.0001,h0=100,bounds=boundaries_utm)
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(100,150),flow_dim=c(30,20))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width=4,
fig.height=2.5
)
devtools::install()
library(tidyverse)
library(sf)
# devtools::install_github("https://github.com/gopalpenny/anem")
# devtools::load_all("~/Projects/R_packages/anem")
library(anem)
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
print(aquifer_unconfined)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  #
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
print(wells)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
drawdown_relationships <- get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
drawdown_relationships %>% knitr::kable("html") %>% kableExtra::kable_styling()
pts_wgs <- genevese_wells
pts_wgs
boundaries_wgs <- genevese_bounds
boundaries_wgs
utm_zone <- longitude_to_utm_zone(mean(st_coordinates(pts_wgs)[,'X']))
utm_proj4 <- utm_zone_to_proj4(utm_zone)
pts_utm <- pts_wgs %>% sf::st_transform(utm_proj4)
boundaries_utm <- boundaries_wgs %>% sf::st_transform(utm_proj4)
ggplot() +
geom_sf(data=boundaries_utm, aes()) +
geom_sf(data=pts_utm, aes())
# bounds <- define_bounds(boundaries_utm)
aquifer_confined <- define_aquifer("confined",1e-3,bounds=boundaries_utm,h0=100,z0=10)
print(aquifer_confined)
bounds_polygon <- aquifer_confined$bounds %>%
summarize() %>% st_polygonize() %>% st_collection_extract("POLYGON")
wells_df_in_aquifer <- pts_utm %>% st_intersection(bounds_polygon) %>% group_by()
wells_df <- wells_df_in_aquifer %>%
mutate(Q=-1e-1/n(),
Q=if_else(well_group=="COMMUNE",-2*Q,Q))  %>%
mutate(R=get_ROI(Ksat=1e-4,h=100,t=3600*24*365*20,n=0.4,method="aravin-numerov"))
wells <- define_wells(wells_df)
ggplot() +
geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray") +
geom_sf(data=aquifer_confined$bounds, aes(color=as.factor(round(m,1)))) +
geom_point(data=wells, aes(x,y))
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(100,150),flow_dim=c(15,10))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_point(data=wells, aes(x,y),shape=1,stroke=1) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_segment(data=flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
coord_equal() +
scale_shape_manual(values=c(1,16),limits=c(3,4))
aquifer_unconfined <- define_aquifer("unconfined",Ksat=0.0001,h0=100,bounds=boundaries_utm)
well_images <- generate_image_wells(wells,aquifer_unconfined)
well_roi <- gen_circles(well_images %>% rename(r=R))
ggplot()  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray") +
geom_point(data=well_images,aes(x,y),alpha=0.5) +
# geom_polygon(data=well_roi,aes(x,y,group=id),alpha=0.3,color="black")
geom_polygon(data=well_roi,aes(x,y,group=id),alpha=0.01)
# well_images <- well_images %>% filter(max_mirror_dist<R)
# well_roi <- gen_circles(well_images %>% rename(r=R))
ggplot()  +
geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray")+
geom_polygon(data=well_roi,aes(x,y,group=id),alpha=0.1,color="black") +
geom_sf(data=aquifer_unconfined$bounds, aes(color=as.factor(bID)),size=1) +
geom_point(data=well_images,aes(x,y,fill=Q),alpha=0.5,size=3,shape=21) +
scale_fill_gradient2("Pumping rate",low="blue",mid="gray",high="red") +
scale_color_discrete("Boundary")
gg_bounds_behavior <- plot_bounds_behavior(well_images,aquifer_unconfined)
gridExtra::grid.arrange(gg_bounds_behavior$p_h,gg_bounds_behavior$p_f,nrow=1)
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(100,150),flow_dim=c(30,20))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
# coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(100,150),flow_dim=c(15,10))
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(100,150),flow_dim=c(15,10))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
# coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
get_gridded_hydrodynamics
flow_dim=c(15,10)
aquifer <- aquifer_unconfined
grid_bounds <- get_quad_vertices(aquifer$bounds) %>% dplyr::filter(!is.na(x)) %>%
dplyr::summarize(xmin=min(x),xmax=max(x),ymin=min(y),ymax=max(y))
devtools::load_all(".")
grid_bounds <- get_quad_vertices(aquifer$bounds) %>% dplyr::filter(!is.na(x)) %>%
dplyr::summarize(xmin=min(x),xmax=max(x),ymin=min(y),ymax=max(y))
grid_pts_head <- with(grid_bounds,tidyr::crossing(x=seq(xmin,xmax,length.out=head_dim[2]),
y=seq(ymin,ymax,length.out=head_dim[1])))
head_dim=c(20,20)
grid_pts_head <- with(grid_bounds,tidyr::crossing(x=seq(xmin,xmax,length.out=head_dim[2]),
y=seq(ymin,ymax,length.out=head_dim[1])))
heads <- get_hydraulic_head(grid_pts_head,wells,aquifer)
head_df <- grid_pts_head %>% dplyr::bind_cols(head_m=heads)
head_df
flow_x_seq <- with(grid_bounds,seq(xmin,xmax,length.out=flow_dim[2]))
flow_y_seq <- with(grid_bounds,seq(ymin,ymax,length.out=flow_dim[1]))
flow_y_seq
flow_dim[1]
flow_dim[2]
flow_x_seq
flow_dim[1]
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
# coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
devtools::load_all(".")
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(150,100),flow_dim=c(15,10))
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(150,100),flow_dim=c(15,10))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_point(data=wells, aes(x,y),shape=1,stroke=1) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_segment(data=flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
coord_equal() +
scale_shape_manual(values=c(1,16),limits=c(3,4))
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(150,100),flow_dim=c(10,6))
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(150,100),flow_dim=c(10,6))
head <- gridded$head
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_point(data=wells, aes(x,y),shape=1,stroke=1) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_segment(data=flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
coord_equal() +
scale_shape_manual(values=c(1,16),limits=c(3,4))
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(150,100),flow_dim=c(10,6))
gridded <- get_gridded_hydrodynamics(wells,aquifer_confined,
head_dim=c(150,100),flow_dim=c(10,6))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_point(data=wells, aes(x,y),shape=1,stroke=1) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_segment(data=flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
coord_equal() +
scale_shape_manual(values=c(1,16),limits=c(3,4))
ggplot()  +
geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray")+
geom_polygon(data=well_roi,aes(x,y,group=id),alpha=0.1,color="black") +
geom_sf(data=aquifer_unconfined$bounds, aes(color=as.factor(bID)),size=1) +
geom_point(data=well_images,aes(x,y,fill=Q),alpha=0.5,size=3,shape=21) +
scale_fill_gradient2("Pumping rate",low="blue",mid="gray",high="red") +
scale_color_discrete("Boundary")
ggplot()  +
geom_sf(data=boundaries_utm, aes(), linetype="dashed",alpha=0.5,color="gray")+
geom_polygon(data=well_roi,aes(x,y,group=id),alpha=0.1,color=NA) +
geom_sf(data=aquifer_unconfined$bounds, aes(color=as.factor(bID)),size=1) +
geom_point(data=well_images,aes(x,y,fill=Q),alpha=0.5,size=3,shape=21) +
scale_fill_gradient2("Pumping rate",low="blue",mid="gray",high="red") +
scale_color_discrete("Boundary")
gg_bounds_behavior <- plot_bounds_behavior(well_images,aquifer_unconfined)
gridExtra::grid.arrange(gg_bounds_behavior$p_h,gg_bounds_behavior$p_f,nrow=1)
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(150,100),flow_dim=c(15,10))
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(150,100),flow_dim=c(15,10))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
# coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(150,100),flow_dim=c(10,6))
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(150,100),flow_dim=c(10,6))
head <- gridded$head
flow <- gridded$flow
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
# coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(150,100),flow_dim=c(10,5))
gridded <- get_gridded_hydrodynamics(well_images,aquifer_unconfined,
head_dim=c(150,100),flow_dim=c(10,5))
head <- gridded$head
flow <- gridded$flow
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y)) +
geom_segment(data=flow,
aes(x,y,xend=x2,yend=y2),arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
# coord_sf(xlim=c(grid_bounds$xmin,grid_bounds$xmax),ylim=c(grid_bounds$ymin,grid_bounds$ymax)) +
scale_shape_manual(values=c(1,16),limits=c(3,4))
aquifer_unconfined$bounds
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_sf(data=aquifer_unconfined$bounds, aes()) +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_segment(data=flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y))
ggplot() +
geom_raster(data=head,aes(x,y,fill=head_m))  +
geom_contour(data=head,aes(x,y,z=head_m),bins=20,color="gray",linetype="dashed")  +
geom_segment(data=flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm"))) +
geom_point(data=well_images %>% filter(well_image=="Actual"),aes(x,y))  +
geom_sf(data=aquifer_unconfined$bounds, aes())
?get_drawdown_relationships
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,  # t = 1 year
country=factor(y>500,levels=c(F,T),labels=c("A","B"))) %>%
group_by(country) %>%
mutate(weights=1,Q=1/n()) %>% group_by()
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
get_drawdown_relationships(wells, aquifer_unconfined, group_column=country, weights_column=weights)
ggplot() +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_abline(slope=0,intercept=500,linetype="dashed") +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y,fill=country),shape=21) +
coord_equal()
?get_gridded_hydrodynamics
# define aquifer
bounds_df <- data.frame(bound_type=c("CH","NF","NF","NF"),m=c(Inf,0,Inf,0),b=c(0,1000,1000,0))
aquifer_unconfined <- define_aquifer("unconfined",1e-3,bounds=bounds_df,h0=100)
# define wells and well images
set.seed(30)
wells_df <- data.frame(x=runif(8,0,1000),y=runif(8,0,1000),diam=1) %>%
mutate(R=1000,Q=-1/n())
wells <- define_wells(wells_df) %>% generate_image_wells(aquifer_unconfined)
gridded <- get_gridded_hydrodynamics(wells,aquifer_unconfined,c(20,20),c(8,8))
ggplot() +
geom_raster(data=gridded$head,aes(x,y,fill=head_m)) +
geom_segment(data=gridded$flow,aes(x,y,xend=x2,yend=y2),
arrow = arrow(ends="last",type="closed",length=unit(1,"mm")),color="black") +
geom_segment(data=aquifer_unconfined$bounds,aes(x1,y1,xend=x2,yend=y2,color=bound_type)) +
geom_point(data=wells %>% filter(wID==orig_wID),aes(x,y),shape=21) +
coord_equal()
?get_gridded_hydrodynamics
